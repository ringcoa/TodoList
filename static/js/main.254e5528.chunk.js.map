{"version":3,"sources":["ListItem.jsx","List.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","todos","delet","cheked","edit","id","text","done","clickedit","useCallback","useMemo","className","type","checked","onChange","onClick","List","map","todo","key","App","useState","setTodos","value","setValue","editstate","setEditState","targetId","setTargetId","nextId","useRef","Insert","console","log","current","concat","e","target","preventDefault","filter","onClickedit","clickEditCancel","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.254e5528.chunk.js","sourcesContent":["import React ,{useCallback , useMemo} from 'react'\r\n\r\nconst ListItem = ({todos , delet ,cheked ,edit}) => {\r\n    const {id,text,done} = todos;\r\n\r\n    const clickedit = useCallback(() =>{\r\n        if(done) return\r\n        edit(id ,text)\r\n    }, [todos])\r\n    return useMemo(()=>(\r\n        <li className=\"list_item\">\r\n            <div className=\"list_left\">\r\n                <input type=\"checkbox\" checked={done} onChange={()=> cheked(id, text , done)}/>\r\n                <span>{text}</span>\r\n            </div>\r\n            <div className=\"list_right\">\r\n                <i className=\"fas fa-pen\" onClick={clickedit}></i>\r\n                <i className=\"far fa-trash-alt\" onClick={() => delet(id)}></i>\r\n            </div>\r\n        </li>\r\n    ),[todos  , delet])\r\n}\r\n\r\nexport default ListItem","import React , {useMemo} from 'react'\r\nimport ListItem from './ListItem'\r\n\r\nconst List = ({todos ,delet ,cheked , edit}) =>{\r\n    return useMemo(()=>(\r\n        <ul className=\"list\">\r\n            {todos.map(todo => <ListItem  todos={todo} key={todo.id} delet={delet} cheked={cheked} edit={edit}/>) }\r\n        </ul>\r\n    ),[todos])\r\n}\r\nexport default List","import React , {useState, useCallback ,useRef ,useMemo} from 'react';\nimport './App.css';\nimport List from './List.jsx'\n// const test = ()=>{\n//   const arr = [];\n//   for(let i =1; i<=2500; i++){\n//     arr.push({\n//       id : i,\n//       text : `할일 ${i}`,\n//       done : false\n//     })\n//   }\n//   return arr\n// }\nfunction App() {\n  //const [todos , setTodos] = useState(test)\n  const [todos , setTodos] = useState([\n    {\n      id : 1,\n      text : '할일',\n      done : false,\n    },\n    { \n      id : 2,\n      text : '할일2',\n      done : true,\n    },    {\n      id : 3,\n      text : '할일3',\n      done : false,\n    },    {\n      id : 4,\n      text : '할일4',\n      done : false,\n    }\n  ]);\n\n  //const [doneList , setDoneList] = useState([]);\n  const [value , setValue] = useState('');\n  const [editstate , setEditState] = useState(false)\n  const [targetId , setTargetId] = useState(-1)\n  const nextId = useRef(5)\n\n  const Insert= useCallback((text)=>{\n    console.log('인설트 실행')\n      const todo = {\n        id : nextId.current,\n        text : text,\n        done : false\n      };\n      setTodos(todos.concat(todo));\n      nextId.current = nextId.current +1;\n  } , [todos]);\n\n  const onChange = useCallback((e)=>{\n    console.log('벨류체인지')\n    setValue(e.target.value);\n  },[])\n\n  const onClick = useCallback(\n    (e) => {\n      console.log('버튼클릭')\n      e.preventDefault()\n      if(value == '')return ;\n      Insert(value)\n      setValue('')\n      \n    },[value]);\n\n    const delet = useCallback((id)=>{\n      console.log(`${id} 삭제`)\n      setTodos(todos.filter(todo => todo.id !== id))\n  },[todos])\n\n  const cheked = useCallback((id , text , done) =>{\n    done = !done;\n    setTodos(todos.map(todo => todo.id === id ? {...todo , done : !todo.done} : todo))\n  },[todos])\n\n  const edit = (id , text) =>{\n    console.log('수정상태')\n    setValue(text);\n    setEditState(true)\n    setTargetId(id)\n     \n    // setTodos(todos.map(todo => id === todo.id ? {...todo, text : value } : todo))\n  }\n  const onClickedit = (e)=>{\n    console.log('수정완료')\n\n    e.preventDefault()\n   \n    setTodos(\n      todos.map(todo =>  todo.id === targetId ? {...todo , text : value} : todo )\n    )\n    setValue('');\n    setEditState(false)\n  }\n\n  const clickEditCancel = (e)=>{\n    setEditState(false);\n    setTargetId(-1)\n    setValue('')\n  }\n\n  return useMemo(()=>(\n    <>\n      <div id=\"wrap\">\n        <h1>TODO LIST</h1>\n        <form>\n          <input className=\"input_todo\" type=\"text\" value={value} onChange={onChange} placeholder=\"할일을 적어주세요!\">\n          </input>\n          {editstate ? <i className=\"far fa-times-circle\" onClick={clickEditCancel}></i> : ''}\n          {editstate ? <button onClick={onClickedit} className='list_add'>수정</button> : <button onClick={onClick} className='list_add'>+</button>}\n        </form>\n        <List todos ={todos} delet={delet} cheked={cheked} edit={edit}/>\n      </div>\n    </>\n  ),[value , todos])\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}